{"version":3,"sources":["Components/home.jsx","Components/edit.jsx","Components/confirm.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","Fragment","className","href","onClick","props","handleID","Component","Edit","name","htmlFor","type","id","size","check","Confirm","App","state","select","editBttn","document","querySelector","value","log","console","ID","Number","fetch","then","response","data","json","objArr","userID","title","yesCheck","noCheck","completed","stringObj","cID","cNum","cTitle","cYes","cNo","userId","checked","addEventListener","textContent","error","this","handleStoreID","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7ce66133.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Home extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"container\">\r\n          <div className=\"home-page\">\r\n            <h1 className=\"banner\">Welcome To Fetch JSON</h1>\r\n\r\n            <div className=\"select-wrapper\">\r\n              <select className=\"select\">\r\n                <option>Select ID from here</option>\r\n                <option>1</option>\r\n                <option>2</option>\r\n                <option>3</option>\r\n                <option>4</option>\r\n                <option>5</option>\r\n              </select>\r\n              <i className=\"fa fa-chevron-circle-down\"></i>\r\n            </div>\r\n\r\n            <div className=\"link-box\">\r\n              <a href=\"home_.html#e-gap\" className=\"edit-bttn\" onClick={() => this.props.handleID()}>\r\n                Edit\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Home;","import React, { Component } from 'react';\r\n\r\nclass Edit extends Component {\r\n\r\n    render() { \r\n        return (\r\n          <React.Fragment>\r\n      \r\n            <div className=\"edit-box\">\r\n              <a name=\"e-gap\" className=\"e-gap\"></a>\r\n\r\n              <a name=\"edit-banner\">\r\n                <h1 className=\"edit-banner\">Welcome To Edit Page</h1>\r\n              </a>\r\n\r\n              <div className=\"form\">\r\n                <div className=\"form-item\">\r\n                  <label htmlFor=\"text\">UserID</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"edit-input\"\r\n                    id=\"userID\"\r\n                    size=\"25\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-item\">\r\n                  <label htmlFor=\"text\">ID</label>\r\n                  <input type=\"text\" className=\"edit-input\" id=\"id\" size=\"25\" />\r\n                </div>\r\n\r\n                <div className=\"form-item\">\r\n                  <label htmlFor=\"text\">Title</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"edit-input\"\r\n                    id=\"title\"\r\n                    size=\"25\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"checkboxes\">\r\n                  <label className=\"completed\">Completed?</label>\r\n\r\n                  <div className=\"bool\">\r\n                    <label>TRUE</label>\r\n                    <input type=\"checkbox\" id=\"yes\" check=\"false\" />\r\n                  </div>\r\n\r\n                  <div className=\"bool\">\r\n                    <label>FALSE</label>\r\n                    <input type=\"checkbox\" id=\"no\" check=\"false\" />\r\n                  </div>\r\n                </div>\r\n\r\n                <a href=\"home_.html#c-gap\" className=\"preview-bttn\">\r\n                  Preview\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </React.Fragment>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Edit;","import React, { Component } from 'react';\r\n\r\nclass Confirm extends Component {\r\n\r\n    render () {\r\n        return (\r\n          <React.Fragment>\r\n            <div className=\"confirm-page\">\r\n              <a name=\"c-gap\" className=\"c-gap\"></a>\r\n              <h1 className=\"confirm-banner\">Confirm The Page below</h1>\r\n\r\n              <div className=\"c-box\">\r\n                <div className=\"c-item\">\r\n                  <label className=\"c-label\">USER-ID</label>\r\n                  <p className=\"c-txt\" id=\"c-ID\">\r\n                    Data from form\r\n                  </p>\r\n                </div>\r\n\r\n                <div className=\"c-item\">\r\n                  <label className=\"c-label\">ID-NUMBER</label>\r\n                  <p className=\"c-txt\" id=\"c-num\">\r\n                    Data from form\r\n                  </p>\r\n                </div>\r\n\r\n                <div className=\"c-item\">\r\n                  <label className=\"c-label\">TITLE</label>\r\n                  <p className=\"c-txt\" id=\"c-title\">\r\n                    Data from form\r\n                  </p>\r\n                </div>\r\n\r\n                <div className=\"checkboxes\">\r\n                  <label className=\"completed\">Completed?</label>\r\n\r\n                  <div className=\"bool\">\r\n                    <label>TRUE</label>\r\n                    <input type=\"checkbox\" id=\"c-yes\" check=\"false\" />\r\n                  </div>\r\n\r\n                  <div className=\"bool\">\r\n                    <label>FALSE</label>\r\n                    <input type=\"checkbox\" id=\"c-no\" check=\"false\" />\r\n                  </div>\r\n                </div>\r\n\r\n                <a href=\"./home_.html\" className=\"confirm-bttn\">\r\n                  Save\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Confirm;","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './Components/home';\nimport Edit from './Components/edit';\nimport Confirm from './Components/confirm';\n\n\nclass App extends Component {\n  state = {}\n\n  handleStoreID() {\n\n    let select, editBttn;\n    select = document.querySelector('.select');\n    editBttn = document.querySelector('.edit-bttn');\n\n    if (select.value === \"Select ID from here\") {\n      editBttn.href = \"#\";\n\n    } else {\n      editBttn.href = \"http://localhost:3000/home_.html#e-gap\";\n    }\n\n    const log = console.log;\n    log('clicked');\n\n    let ID = Number(document.querySelector('.select').value);\n\n    fetch('https://jsonplaceholder.typicode.com/todos')\n      .then(response => { return response })\n      .then(data => { return data.json() })\n      .then(objArr => {\n        /* Run the  ASYNC FUNC here */\n        try {\n\n          /** TRY */\n\n          let stringObj = objArr[ID - 1];\n          log(stringObj);\n\n          let userID, id, title, yesCheck, noCheck, completed;\n          userID = document.querySelector('#userID');\n          id = document.querySelector('#id');\n          title = document.querySelector('#title');\n          yesCheck = document.querySelector('#yes');\n          noCheck = document.querySelector('#no');\n\n          let storeData = () => {\n            userID.value = stringObj.userId;\n            id.value = stringObj.id;\n            title.value = stringObj.title;\n\n            if (stringObj.completed === true) {\n              yesCheck.checked = 'true';\n              completed = 'true';\n\n            } else {\n              noCheck.checked = 'true';\n              completed = 'false';\n            }\n\n            return {\n              userID: userID.value,\n              id: id.value,\n              title: title.value,\n              completed: completed,\n            }\n\n          }\n\n          log(storeData());\n\n          /** CONFIRM PAGE */\n          let cID, cNum, cTitle, cCompleted, cYes, cNo;\n          cID = document.querySelector('#c-ID');\n          cNum = document.querySelector('#c-num');\n          cTitle = document.querySelector('#c-title');\n\n          cYes = document.querySelector('#c-yes');\n          cNo = document.querySelector('#c-no');\n\n\n          document.querySelector('.preview-bttn').addEventListener('click', () => {\n            cID.textContent = userID.value;\n            cNum.textContent = id.value;\n            cTitle.textContent = title.value;\n\n            cYes.checked = yesCheck.checked;\n            cNo.checked = noCheck.checked;\n\n          })\n\n\n        } catch (error) {\n          /** CATCH ERROR*/\n          log(error);\n        }\n      });\n  }\n\n\n\n  render() {\n    console.log(this.props)\n\n    return (\n      <React.Fragment>\n        <Home handleID={this.handleStoreID} />\n        <Edit />\n        <Confirm />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}